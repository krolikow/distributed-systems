# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `demo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if 'NoInput' not in _M_Demo.__dict__:
    _M_Demo.NoInput = Ice.createTempClass()
    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Demo::NoInput'

    _M_Demo._t_NoInput = IcePy.defineException('::Demo::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_Demo._t_NoInput

    _M_Demo.NoInput = NoInput
    del NoInput

_M_Demo._t_FreqIdemp = IcePy.defineValue('::Demo::FreqIdemp', Ice.Value, -1, (), False, True, None, ())

if 'FreqIdempPrx' not in _M_Demo.__dict__:
    _M_Demo.FreqIdempPrx = Ice.createTempClass()
    class FreqIdempPrx(Ice.ObjectPrx):

        def add(self, a, b, context=None):
            return _M_Demo.FreqIdemp._op_add.invoke(self, ((a, b), context))

        def addAsync(self, a, b, context=None):
            return _M_Demo.FreqIdemp._op_add.invokeAsync(self, ((a, b), context))

        def begin_add(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.FreqIdemp._op_add.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_Demo.FreqIdemp._op_add.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.FreqIdempPrx.ice_checkedCast(proxy, '::Demo::FreqIdemp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.FreqIdempPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::FreqIdemp'
    _M_Demo._t_FreqIdempPrx = IcePy.defineProxy('::Demo::FreqIdemp', FreqIdempPrx)

    _M_Demo.FreqIdempPrx = FreqIdempPrx
    del FreqIdempPrx

    _M_Demo.FreqIdemp = Ice.createTempClass()
    class FreqIdemp(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::FreqIdemp', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::FreqIdemp'

        @staticmethod
        def ice_staticId():
            return '::Demo::FreqIdemp'

        def add(self, a, b, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_FreqIdempDisp)

        __repr__ = __str__

    _M_Demo._t_FreqIdempDisp = IcePy.defineClass('::Demo::FreqIdemp', FreqIdemp, (), None, ())
    FreqIdemp._ice_type = _M_Demo._t_FreqIdempDisp

    FreqIdemp._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())

    _M_Demo.FreqIdemp = FreqIdemp
    del FreqIdemp

_M_Demo._t_FreqNotIdemp = IcePy.defineValue('::Demo::FreqNotIdemp', Ice.Value, -1, (), False, True, None, ())

if 'FreqNotIdempPrx' not in _M_Demo.__dict__:
    _M_Demo.FreqNotIdempPrx = Ice.createTempClass()
    class FreqNotIdempPrx(Ice.ObjectPrx):

        def getFibb(self, context=None):
            return _M_Demo.FreqNotIdemp._op_getFibb.invoke(self, ((), context))

        def getFibbAsync(self, context=None):
            return _M_Demo.FreqNotIdemp._op_getFibb.invokeAsync(self, ((), context))

        def begin_getFibb(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.FreqNotIdemp._op_getFibb.begin(self, ((), _response, _ex, _sent, context))

        def end_getFibb(self, _r):
            return _M_Demo.FreqNotIdemp._op_getFibb.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.FreqNotIdempPrx.ice_checkedCast(proxy, '::Demo::FreqNotIdemp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.FreqNotIdempPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::FreqNotIdemp'
    _M_Demo._t_FreqNotIdempPrx = IcePy.defineProxy('::Demo::FreqNotIdemp', FreqNotIdempPrx)

    _M_Demo.FreqNotIdempPrx = FreqNotIdempPrx
    del FreqNotIdempPrx

    _M_Demo.FreqNotIdemp = Ice.createTempClass()
    class FreqNotIdemp(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::FreqNotIdemp', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::FreqNotIdemp'

        @staticmethod
        def ice_staticId():
            return '::Demo::FreqNotIdemp'

        def getFibb(self, current=None):
            raise NotImplementedError("servant method 'getFibb' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_FreqNotIdempDisp)

        __repr__ = __str__

    _M_Demo._t_FreqNotIdempDisp = IcePy.defineClass('::Demo::FreqNotIdemp', FreqNotIdemp, (), None, ())
    FreqNotIdemp._ice_type = _M_Demo._t_FreqNotIdempDisp

    FreqNotIdemp._op_getFibb = IcePy.Operation('getFibb', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_Demo.FreqNotIdemp = FreqNotIdemp
    del FreqNotIdemp

_M_Demo._t_RarIdemp = IcePy.defineValue('::Demo::RarIdemp', Ice.Value, -1, (), False, True, None, ())

if 'RarIdempPrx' not in _M_Demo.__dict__:
    _M_Demo.RarIdempPrx = Ice.createTempClass()
    class RarIdempPrx(Ice.ObjectPrx):

        def getData(self, i, context=None):
            return _M_Demo.RarIdemp._op_getData.invoke(self, ((i, ), context))

        def getDataAsync(self, i, context=None):
            return _M_Demo.RarIdemp._op_getData.invokeAsync(self, ((i, ), context))

        def begin_getData(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.RarIdemp._op_getData.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_getData(self, _r):
            return _M_Demo.RarIdemp._op_getData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.RarIdempPrx.ice_checkedCast(proxy, '::Demo::RarIdemp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.RarIdempPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::RarIdemp'
    _M_Demo._t_RarIdempPrx = IcePy.defineProxy('::Demo::RarIdemp', RarIdempPrx)

    _M_Demo.RarIdempPrx = RarIdempPrx
    del RarIdempPrx

    _M_Demo.RarIdemp = Ice.createTempClass()
    class RarIdemp(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::RarIdemp', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::RarIdemp'

        @staticmethod
        def ice_staticId():
            return '::Demo::RarIdemp'

        def getData(self, i, current=None):
            raise NotImplementedError("servant method 'getData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_RarIdempDisp)

        __repr__ = __str__

    _M_Demo._t_RarIdempDisp = IcePy.defineClass('::Demo::RarIdemp', RarIdemp, (), None, ())
    RarIdemp._ice_type = _M_Demo._t_RarIdempDisp

    RarIdemp._op_getData = IcePy.Operation('getData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_Demo.RarIdemp = RarIdemp
    del RarIdemp

_M_Demo._t_RarNotIdemp = IcePy.defineValue('::Demo::RarNotIdemp', Ice.Value, -1, (), False, True, None, ())

if 'RarNotIdempPrx' not in _M_Demo.__dict__:
    _M_Demo.RarNotIdempPrx = Ice.createTempClass()
    class RarNotIdempPrx(Ice.ObjectPrx):

        def processData(self, dataSeq, context=None):
            return _M_Demo.RarNotIdemp._op_processData.invoke(self, ((dataSeq, ), context))

        def processDataAsync(self, dataSeq, context=None):
            return _M_Demo.RarNotIdemp._op_processData.invokeAsync(self, ((dataSeq, ), context))

        def begin_processData(self, dataSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.RarNotIdemp._op_processData.begin(self, ((dataSeq, ), _response, _ex, _sent, context))

        def end_processData(self, _r):
            return _M_Demo.RarNotIdemp._op_processData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.RarNotIdempPrx.ice_checkedCast(proxy, '::Demo::RarNotIdemp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.RarNotIdempPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::RarNotIdemp'
    _M_Demo._t_RarNotIdempPrx = IcePy.defineProxy('::Demo::RarNotIdemp', RarNotIdempPrx)

    _M_Demo.RarNotIdempPrx = RarNotIdempPrx
    del RarNotIdempPrx

    _M_Demo.RarNotIdemp = Ice.createTempClass()
    class RarNotIdemp(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::RarNotIdemp', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::RarNotIdemp'

        @staticmethod
        def ice_staticId():
            return '::Demo::RarNotIdemp'

        def processData(self, dataSeq, current=None):
            raise NotImplementedError("servant method 'processData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_RarNotIdempDisp)

        __repr__ = __str__

    _M_Demo._t_RarNotIdempDisp = IcePy.defineClass('::Demo::RarNotIdemp', RarNotIdemp, (), None, ())
    RarNotIdemp._ice_type = _M_Demo._t_RarNotIdempDisp

    RarNotIdemp._op_processData = IcePy.Operation('processData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Demo.RarNotIdemp = RarNotIdemp
    del RarNotIdemp

# End of module Demo
